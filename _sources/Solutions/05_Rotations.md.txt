---
jupytext:
  formats: ipynb,md:myst
  text_representation:
    extension: .md
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.13.0
kernelspec:
  display_name: Python 3 (phys-521)
  language: python
  name: phys-521
---

```{code-cell} ipython3
:tags: [hide-cell]
%matplotlib inline
import numpy as np, matplotlib.pyplot as plt
import manim.utils.ipython_magic
```

# Assignment 5: Rotations

+++

**Due: 11:59pm Friday 19 November 2021**

+++

## Rolling Coin
Consider a coin rolling in a circle.  Treat the coin as a flat disk of radius $R$ and
mass $M$.  Assume that the coin rolls without slipping.  Determine all properties of the
motion (period of the orbit, radius of the circle, angle of the coin, angular velocities
etc.)  Be sure to clearly sketch the geometry of your problem, perform a dimensional
analysis, and check your solution by considering various limits.


### Solution

See the class Notebook for some figures and an alternate approach.

:::{admonition} Strategy

The coin is rolling, and the motion around the center of the orbit can be
thought of as precession of the rigid body due to the torques applied by normal and
frictional force of the table.  We will need the moment of inertia tensor
$\mat{I}_{cm}$, and the angular velocity of the coin.  The angular velocity will have
two components -- one directed along the $z$ axis $\omega \uvect{z}$ with magnitude
equal to the precession angular frequency, and another along the radius of the coin.
The latter component will combine with the motion of the center of mass to cause the
point of contact of the coin to move.  This must match the velocity of the table --
i.e. zero -- for there to be no slipping.

If we work in the center of mass frame, the rotational motion is simply:

\begin{gather*}
  \diff{\vect{L}_{cm}}{t} = \vect{\Gamma}_{cm} = \omega \uvect{z} \times \vect{L}.
\end{gather*}

The last term comes from the fact that the motion is circular, with the precession
frequency $\omega$.  We now need to compute the direction and magnitude of $\vect{L}$
using the moment of inertia, and geometry of no-slip.
:::

First we need the moment of inertia for a solid disk of mass $M$ and radius $R$.  If we
place the disk in the $x$-$y$ plane, then, using cylindrical coordinates $x + \I y =
\rho e^{\I \phi}$ we have:

\begin{gather*}
  \mat{I} = \frac{M}{\pi R^2} \int_{0}^{R}r\d{r}\int_{0}^{2\pi}\d\phi\;
  \begin{pmatrix}
    y^2 & -xy & 0\\
    -xy & x^2 & 0\\
    0 & 0 & r^2
  \end{pmatrix}\\
  =
  \frac{M}{\pi R^2} \int_{0}^{R}r\d{r}\int_{0}^{2\pi}\d\phi\;
  r^2
  \begin{pmatrix}
    \sin^2\phi & -\sin\phi\cos\phi & 0\\
    -\sin\phi\cos\phi & \cos^2\phi & 0\\
    0 & 0 & 1
  \end{pmatrix}\\
  =
  \frac{M}{\pi R^2}\frac{R^4}{4}
  \begin{pmatrix}
    \pi & 0 & 0\\
    0 & \pi & 0\\
    0 & 0 & 2\pi
  \end{pmatrix}
  =
  \frac{MR^2}{4}
  \begin{pmatrix}
    1 & 0 & 0\\
    0 & 1 & 0\\
    0 & 0 & 2
  \end{pmatrix}
\end{gather*}

We now define our coordinates:

* We take the origin of our coordinate system as the center of our orbit, and we
  consider a time at which the point of contact and center of mass lie along the $x$
  axis ($y=0$).
* $r>0$ is the radius of the point of contact from the origin.
* $r_{cm}$ is the radius at which the center of mass lies from the origin.
  In most cases $r_{cm} > 0$, but it is possible that it lies on the other side of the
  origin, which we denote with $r_{cm} < 0$.
* $\theta$ is the angle of tilt so that a vertical coin would have $\theta = 0$ and a
  coin laying flat would have $\theta = \pi/2$,
* $\Omega$ is the angular velocity of the coin about the center of the table (the orbit)
  -- the angular velocity of "precession".  We take this to be positive $\Omega>0$.
* $-\dot{\psi}$ is the angular velocity of the coin about its center of mass.  If $r_{cm}>0$,
  then this must be negative to satisfy the no-slip condition, so in the generic case
  $\dot{\psi}>0$, but again, we might need to consider the other case if $r_{cm} < 0$,
  in which case this will be positive.
  
We have two relevant frames: the lab frame $(\uvect{x}, \uvect{y}, \uvect{z})$ and the
body-frame with unit vectors aligned along the three principle axes $(\uvect{e}_{1},
\uvect{e}_{2}, \uvect{e}_{3})$ with inertia components:

\begin{gather*}
  I_{1} = I_{2} = \frac{MR^2}{4}, \qquad
  I_{3} = \frac{MR^2}{2}.
\end{gather*}

With these coordinates we have:

\begin{gather*}
  \begin{pmatrix}
    \uvect{e}_1\\
    \uvect{e}_2\\
    \uvect{e}_3\\
  \end{pmatrix}
  =
  \begin{pmatrix}
    -\sin\theta &  & \cos\theta\\
     & 1 &\\
    \cos\theta & & \sin\theta
  \end{pmatrix}
  \cdot
  \begin{pmatrix}
    \uvect{x}\\
    \uvect{y}\\
    \uvect{z}
  \end{pmatrix},\\
  \begin{pmatrix}
    \uvect{x}\\
    \uvect{y}\\
    \uvect{z}
  \end{pmatrix}
  =
  \begin{pmatrix}
    -\sin\theta &  & \cos\theta\\
     & 1 &\\
    \cos\theta & & \sin\theta
  \end{pmatrix}
  \cdot
  \begin{pmatrix}
    \uvect{e}_1\\
    \uvect{e}_2\\
    \uvect{e}_3\\
  \end{pmatrix}.
\end{gather*}

With these coordinates, we can now express the angular velocity vector, and angular momentum:

\begin{gather*}
  \vect{\omega} = -\dot{\psi}\uvect{e}_3 + \Omega \uvect{z}
  = (\Omega \sin\theta - \dot{\psi})\uvect{e}_3 + \Omega\cos\theta\uvect{e}_1\\
  \vect{L}_{cm} = \mat{I}\vect{\omega}
  = I_3(\Omega \sin\theta - \dot{\psi})\uvect{e}_3 + I_1\Omega\cos\theta\uvect{e}_1.
\end{gather*}

The no-slip condition is a little tricky. The velocity at the point of contact is a
combination of two components: linear motion $v = r\Omega$ and rotary motion
$-R\dot{\psi}$.  These must cancel so that this point not move: 

\begin{gather*}
  r\Omega = R\dot{\psi}.
\end{gather*}

:::{note}
The tricky part is that the no-slip condition is *not* $r_{cm}\Omega = R\dot{\psi}$,
which one might conclude if one thought of the velocity as the sum of $v_{cm} -
R\dot{\psi}$ where $v_{cm} = r_{cm}\Omega$.  The correct way to think about this is to
move to the co-rotating frame.  In this frame, the center of mass is stationary, but the
tip of the coin moves backwards at speed $R\dot{\psi}$.  Now transforming back to the
lab frame, we acquire a linear velocity $r\Omega$, not $r_{cm}\Omega$.  Another check is
to consider $\dot{\psi} = 0$: the linear velocity of the point of contact would be
$r\Omega$ not $r_{cm}\Omega$.  Finally, consider the Euler disk limit where $r_{cm}
\rightarrow 0$, but the point of contact still moves around the outside: here it is
clear that the linear velocity is not $r_{cm}\Omega \rightarrow 0$.
:::


:::{margin}
For this problem, **because** the moment of inertia is symmetric, we could use the point
of contact only and get the correct answer, but this requires a careful argument based
on the following problem, so we do not do this here.  Working in the CM frame is
safer, even if it is a little messy.
:::

Now we must determine the torques.  The safe way is to do this about the center of
mass.  Here there are two opposite torques from forces acting at the point of contact.
The normal force $\vect{F}_N = Mg\uvect{z}$ which counters gravity, and the friction
force $\vect{F}_{F} = -Mr_{cm}\Omega^2\uvect{x}$ which causes the center of mass to
experience the centripetal acceleration that keeps it moving in a circle.  Gravity does
not exert a torque about the center of mass since it acts here.

A slight complication is the geometry that

\begin{gather*}
  r_{cm} = r - R\sin\theta.
\end{gather*}

Finally, we must compute the sine of the appropriate angles to get the final torque:

:::{margin}
A quick check of the signs is prudent here.  The normal force torques along the negative
$y$ direction, while the friction is along the positive direction (if $r>r_{cm}$).
:::
\begin{align*}
  \vect{F} &= Mg\uvect{z} - Mr_{cm}\Omega^2\uvect{x}\\
  \vect{\Gamma}_{cm} &= (-R\vect{e}_{1})\times \vect{F} \\
                     &= -MR(\cos\theta \uvect{z} - \sin\theta \uvect{x})
                        \times(g\uvect{z} - r_{cm}\Omega^2\uvect{x})\\
    &= MR\Bigl(-g\sin\theta + r_{cm}\Omega^2\cos\theta\Bigr)\uvect{y}.
\end{align*}

We can now put everything, noting that $\uvect{z}\times\uvect{e}_1 = -\sin\theta
\uvect{y}$ and $\uvect{z}\times \uvect{e}_3 = \cos\theta \uvect{y}$:

\begin{gather*}
  \vect{\Gamma}_{cm} = \Omega \vect{z}\times\vect{L}_{cm}\\
  MR\Bigl(-g\sin\theta + r_{cm}\Omega^2\cos\theta\Bigr) =\\ 
  \Omega I_3(\Omega \sin\theta - \dot{\psi})\cos\theta - I_1\Omega^2\cos\theta\sin\theta.
\end{gather*}

Using the no-slip condition to replace $\dot{\psi} = r\Omega / R$, we can solve for the
precession frequency $\Omega$:
  
\begin{gather*}
  -gMR\frac{\sin\theta}{\cos\theta} = 
  \Omega^2 \Bigl((I_3-I_1)\sin\theta - I_3\tfrac{r}{R} - MRr_{cm}\Bigr).
\end{gather*}

This gives us the final answer, after placing in the values of $I_1$ and $I_3$:
  
\begin{gather*}
  \frac{g}{\Omega^2} = \left(\frac{3r}{2\sin\theta} - \frac{5R}{4}\right)\cos\theta.
\end{gather*}

Now we can check some limiting cases:

1. If $g\rightarrow 0$ we have no torque, so $\Omega \propto \sqrt{g} \rightarrow 0$, which
   makes sense.
2. If the coin rolls in a straight line, then $\theta \rightarrow 0$ which means that
   the right side diverges, implying $\Omega^2 \rightarrow 0$ which is consistent.
3. If $\Omega^2>0$, then the right-hand-side must be positive.  This means:

   \begin{gather*}
     r > \frac{5}{6} R \sin\theta.
   \end{gather*}
   
   Note that this admits the possibility that $r < R$.  This might seem strange, but is
   an acceptable solution.  Consider a coin balanced on its edge spinning.  In this case
       $\theta \approx 0$ and so $r \approx 0$.  In this case the coin is not really
   rolling -- $\dot{\psi} = r\Omega / R \approx 0$ -- but this is still properly
   described by our equations.
4. A very interesting limit is where $\theta \rightarrow \pi/2$, which happens as the
   coin falls and accelerates towards the end of its motion.  In this case, one would
   expect $r \approx R$, but the previous relation gives $r \geq 5R/6$.  While this
   allows for $r\approx R$, it also allows for much larger $r$.  This is okay -- imagine
   a coin rolling around in a bowl with almost vertical walls.  Such a coin could like
   almost flat, yet have $r \gg R$ where $r$ is the almost the radius of the bowl.
   
   If you tried to arrange this motion on a flat table, almost certainly the coefficient
   of friction would be insufficient to prevent slipping, invalidating our equation, and
   leading to the commonly observed limit in this case of $r \approx R$.

   To further explore this, limit, let $\alpha = \pi/2 - \theta$ and expand for small
   $\alpha$:
   
   \begin{gather*}
     \frac{\Omega^2}{g} \approx \frac{\bigl(1-\tfrac{\alpha^2}{2}\bigr)/\alpha}
                                     {\tfrac{3}{2} r -
     \tfrac{5}{4}R\bigl(1-\tfrac{\alpha^2}{2}\bigr)}
     \approx
     \frac{2}{3\alpha(r-\tfrac{5}{6}R)} + \order(\alpha).
   \end{gather*}
   
   Thus, as the coin goes flat $\Omega \rightarrow \infty$ unless $r$ increases as
   $1/\alpha$ (big bowl).


::::{note}
Rolling motion in multiple dimensions is not generally holonomic, thus, one cannot
trivially apply a Lagrangian approach.  In this case, think about which variables would
enter $L$?  One can use conservation of energy, but ultimately, a force equation
(Newton's law) is needed to find the full relationship between $\Omega$, $\theta$, $r$,
and $R$.
::::

## Rolling Hoop (Phantom Torques)


Solve for the equations of motion for a rolling half-circle as discussed in the class
notes {ref}`phantom-torque` and shown below:


```{code-cell} ipython3
:tags: [hide-input]

%%manim -v WARNING -qm RollingHoop
from manim import *
from types import SimpleNamespace


class Hoop:
    R = 4.0
    theta0 = 0.6
    r_cm = 2 / np.pi * R
    m = 1.0
    I_o = m * R ** 2
    I_cm = I_o - m * r_cm ** 2
    shift = UP

    def __init__(self, **kw):
        for k in kw:
            assert hasattr(self, k)
            setattr(self, k, kw.pop(k))
        assert not kw
        
        self.objects = self.annotations

    def get_arc(self, theta=None):
        """Return a (arc, points) for a hoop"""
        color = 'white'
        if theta is None:
            theta = self.theta0
            color = 'cyan'
            
        z_o = -self.R * theta + 0j
        z_cm = z_o - 1j * self.r_cm * np.exp(theta * 1j)
        z_p = z_o - 1j * self.R
        o, p, cm = [np.array([_z.real, _z.imag, 0]) for _z in [z_o, z_p, z_cm]]
        e1 = o + self.R * np.array([np.cos(theta), np.sin(theta), 0])

        arc = Arc(
            radius=self.R, start_angle=PI + theta, angle=PI, arc_center=o,
            color=color
        )
        arc.stroke_width = 10.0
        points = SimpleNamespace(O=o+self.shift, P=p+self.shift, C=cm+self.shift)
        arc.shift(self.shift)
        
        # These are the actual objects we display
        return (arc, points)

    @property
    def annotations(self):
        """Return a `Group` object with the hoop and all of the annotations."""
        arc, points = self.get_arc()
        
        objs = []
        P, C, O = points.P, points.C, points.O
        for _p0, _p1, _t in [
            (arc.get_end(), O, "R"),
            (C, O, r"a"),
        ]:
            objs.append(BraceBetweenPoints(_p0, _p1))
            objs.append(objs[-1].get_tex(_t))
            #objs[-1].font_size = 40
        objs.extend(
            [
                LabeledDot("O", point=O),
                LabeledDot("P", point=P),
                LabeledDot("C", point=C),
            ]
        )
        
        OC = DashedLine(O, C, color='cyan')
        OP = DashedLine(O, P, color='cyan')
        theta = Angle(OP, OC, radius=0.7, dot_radius=2.0)
        theta_l = Tex(r"$\theta$")
        _m = theta.get_midpoint()
        theta_l.next_to(O + 1.5*(_m-O), 0)
        objs.extend([OC, OP, theta, theta_l])

        floor = Line((-6, -self.R, 0), (6, -self.R, 0))
        floor.shift(self.shift)
        floor.stroke_width = arc.stroke_width
        self.arc = arc
        annotations = Group(arc, floor, *objs)
        return annotations


class HoopAnimation(Animation):
    def __init__(self, hoop, **kw):
        super().__init__(hoop.get_arc(theta=hoop.theta0)[0], **kw)
        self.hoop = hoop
        
    def interpolate_mobject(self, alpha):
        # Fake dynamics
        theta = self.hoop.theta0 * np.cos(2*np.pi * alpha)
        self.mobject.points = self.hoop.get_arc(theta=theta)[0].points
        

class RollingHoop(Scene):
    def construct(self):
        hoop = Hoop()
        self.add(hoop.annotations)
        #self.play(HoopAnimation(hoop=hoop), run_time=3, rate_func=linear)
```

Here we have half of a hoop of radius $R$ and mass $m$, with center of mass at $C$ which
is distance $a$ from the center of the hoop $O$.  The external torque is provided
by the downward acceleration due to gravity $g>0$.  The hoop rolls without slipping
along the floor with point of contact $P$.  The aim of this problem is to obtain the
equations of motion for $\theta(t)$.

1. Compute the moments of inertia $I_{O}$, $I_{C}$, and $I_{P}(\theta)$ and relate these
   to each other using the parallel axis theorem.  Express your answer in terms of $m$,
   $R$, $a$, and $\theta$.  *(For this problem, show that $a=2R/\pi$, but express
   everything in terms of $a$.  This allows you to generalize to symmetric but unequal
   mass distributions.)* 
   
2. Solve for the equations of motion using the Lagrangian framework about the two points
   where the rotational and transitional motions can be decoupled.  Show that this gives
   the same equations of motion, with the parallel axis theorem adjusting the moments of
   inertia exactly as needed to correct the equations.
3. Solve the equations of motion using Newton's law about the center-of-mass $C$:

   $$
     \diff{\vect{L}}{t} = \vect{\tau}.
   $$
   
   Draw all forces and calculate the torque $\vect{\tau}$ in terms of these.
   
4. :::{margin}
   Alternative corrections to Newton's law are discussed in {cite:p}`Jensen:2011`
   (available [on
   Perusal](https://app.perusall.com/courses/2021-fall-physics-521-pullm-1-01-01645-classical-mechanics-i/rules-for-rolling-as-a-rotation-about-the-instantaneous-point-of-contact-73799225)
   for discussion), but I 
   do not find any of these very intuitive.  Please let me know if you find any of these
   intuitive.
   :::

   Try solving the equations of motion using Newton's law about the instantaneously
   stationary point $P$.  You should find that a simple application of Newton's law does
   **not** give the correct answer.  Instead, you will need to correct Newton's law to
   include a "phantom torque" {cite:p}`Turner:2010a`.
   
   Show that these corrections arise from the $\theta$ dependence of $I_{P}(\theta)$.
   For this reason, one can use $P$ for the analysis if $I_{P}$ is independent of
   $\theta$ as it is for a complete hoop, balls, cylinders etc.

### Solution

:::{margin}
My hint to use $a$ as the distance to the center of mass was not a suggestion to
completely replace $R = \pi a/2$ everywhere, but to pretend like you did not know this,
and use both $a$ and $R$.  Apart from making things simpler (no factors of $\pi/2$),
this makes the result applicable for any symmetric mass distribution along the hoop.
:::
See {cite:p}`Turner:2010a` for a complete solution.  Here is a simplified presentation.
Let $a$ be the distance from $O$ to $C$ and $d = \sqrt{(R-a\cos\theta)^2 +
(a\sin\theta)^2}$ be the distance from $P$ to $C. 

\begin{gather*}
  I_O = mR^2 = I_C + Ma^2, \qquad
  I_C = m(R^2 - a^2), \qquad
  I_P = I_C + md^2 = M(R^2 - a^2 + d^2) = 2mR(R - a\cos\theta).
\end{gather*}

The Lagrangian is thus,

\begin{gather*}
  L(\theta, \dot{\theta}) = \frac{I_P}{2}\dot{\theta}^2 + mga\cos\theta
  = mR(R - a\cos\theta)\dot{\theta}^2 + mga\cos\theta,\\
  p_{\theta} = 2mR(R - a\cos\theta)\dot{\theta}, \\
  \dot{p}_{\theta} = 2mR(R - a\cos\theta)\ddot{\theta} + 2maR\sin\theta\dot{\theta}^2,\\
  \pdiff{L}{\theta} = maR\sin\theta \dot{\theta}^2 - mga\sin\theta,\\
  2\left(\frac{R}{a} - \cos\theta\right)\ddot{\theta} 
  = -\dot{\theta}^2\sin\theta - \frac{g}{R}\sin\theta.
\end{gather*}







<!--
1. First we compute $a$ using the coordinates when $\theta = 0$, noting that
   $y=R\sin\phi$ and $\d{m} = M\d{\phi}/\pi$: 
   
   \begin{gather*}
     a = \frac{-1}{M}\int\d{m}\; y  
       = \frac{-1}{M}\frac{M}{\pi}\int_{-\pi}^{0}\!\!\!\d{\phi}\; R\sin\phi
       = \left.\frac{R}{\pi}\cos\phi\right|^{0}_{-\pi}
       = \frac{2R}{\pi}.
   \end{gather*}

   The moments of inertia can be computed by repeated use of the parallel axis theorem
   and the distance $d$ between $P$ and $C$.

   \begin{align*}
     d^2 &= (R-a\cos\theta)^2 + (a\sin\theta)^2 
          = R^2 + a^2 - 2aR\cos\theta,\\
         &= R^2\left(1 + \frac{4}{\pi^2} - \frac{4\cos\theta}{\pi}\right),\\
     I_{O} &= MR^2 = I_{C} + Ma^2,\\
     I_{C} &= I_{O} - Ma^2 = MR^2\left(1 - \frac{4}{\pi^2}\right),\\
     I_{P}(\theta) &= I_{C} + Md^2 
            = 2MR^2\left(1 - \frac{2\cos\theta}{\pi}\right),\\
   \end{align*}

2. The kinetic energy is simple about the contact point $P$ (pure rotation) and about
   the center of mass $C$.  About $P$ it is:
   
   \begin{gather*}
     K = I_P(\theta)\frac{\dot{\theta}^2}{2} 
       = (I_C + Md^2)\frac{\dot{\theta}^2}{2}
       = I_C\frac{\dot{\theta}^2}{2} + M\frac{v^2}{2},
   \end{gather*}
   
   where $v = d\dot{\theta}$ is the speed at which the center of mass is moving, since
   this is pure instantaneous rotation about $P$.  Thus, we have the correct form for
   $K$ about $C$ with the two components: rotation and translation.
   
   This gives the following Lagrangian and solution:

   \begin{gather*}
     L(\theta, \dot{\theta}) = mR(R-a\cos\theta)\dot{\theta}^2 + mga\cos\theta,\\
     \diff{}{t}\pdiff{L}{\dot{\theta}} = \pdiff{L}{\theta},\\
     2mR(R-a\cos\theta)\ddot{\theta} = -mRa\sin\theta\dot{\theta}^2 - mga\sin\theta,\\
     \left(1 - \frac{2}{\pi}\cos\theta\right)\ddot{\theta} =
     -\frac{\sin\theta}{\pi} \dot{\theta}^2 - \frac{\sin\theta}{\pi}\frac{g}{R}.
   \end{gather*}

   This is (13) from {cite:p}`Turner:2010a`.

3. To apply Newton's law about the center of mass we must find the vertical normal force
   $F_n$ and friction force $F_f$ at $P$.  The net force is responsible for the
   acceleration of the center of mass.  First we compute the location of $C$ in terms of
   $\theta$: 
   
   \begin{align*}
      \vect{C} &= \begin{pmatrix}
        a\sin\theta - R\theta\\
        -a\cos\theta
      \end{pmatrix}, \\
      \dot{\vect{C}}
      &= \begin{pmatrix}
        \dot{\theta}(a\cos\theta - R)\\
        a\dot{\theta}\sin\theta
      \end{pmatrix}, \\
      \ddot{\vect{C}}
      &= \begin{pmatrix}
        -a\dot{\theta}^2\sin\theta + \ddot{\theta}(a\cos\theta - R)\\
        a\dot{\theta}^2\cos\theta + a\ddot{\theta}\sin\theta
      \end{pmatrix}
      =
      \begin{pmatrix}
      F_f/M \\
      F_n/M - g
      \end{pmatrix}.
   \end{align*}
   
   The net torque pointing out of the page is:
   
   \begin{gather*}
     I_{C}\ddot{\theta} = \tau = d(F_F\cos\theta - F_N\sin\theta)\\
     = Md\Bigl(
       -2a\dot{\theta}^2\sin\theta\cos\theta 
       +\ddot{\theta}(a - R\cos\theta) 
       + g\sin\theta\Bigr).
   \end{gather*}
   
   Collecting the $\ddot{\theta}$ terms on the left and canceling factors of $MR^2$ we
   have:
   
   \begin{gather*}
     \left(1 - \frac{4\cos\theta}{\pi^2}
       - \frac{d(a-R\cos\theta)}{R^2}
     \right)\ddot{\theta}
     = \frac{d}{R}\Bigl(
       -2\frac{a}{R}\dot{\theta}^2\sin\theta\cos\theta 
       + \frac{g}{R}\sin\theta\Bigr).
   \end{gather*}  -->
   
+++

## Nutation

:::{margin}
You might rightly worry that using $\dot{\vec{L}} = \vec{\tau}$ here might cause
problems due to the phantom-torque issue discussed in the previous problem, however, in
this case the momentum of inertia about the pivot point does not depend on the angles,
so, as you showed in part 4 above, no phantom torques are needed.
:::
Using the parametrization of the Euler angles in Landau and Lifshitz Volume 1, describe
nutation in the small amplitude limit (i.e. treat this as an application of the
normal-mode theory discussed in class.)  Clearly state all steps in formulating the
problem, i.e. deriving the equations (use the Lagrangian approach, and conserved
quantities to obtain an effective 1D theory with an appropriate effective potential),
find the "stationary" solution - this corresponds to simple **precession**.  Check this
by considering the Newton's law in the form of the time-evolution of the angular
momentum $\dot{\vec{L}} = \vec{\Omega}\times\vec{L} = \vec{\tau}$.  Then, describe the
deviations from the stationary solution to derive the normal modes.  Try to identify all
of the modes shown in Fig. 49, and check your answer numerically using the analytic
solution (7).  (References are version available [on
Perusall](https://app.perusall.com/courses/2021-fall-physics-521-pullm-1-01-01645-classical-mechanics-i/ll_6-rigidbody).)
Let me know if you need any help setting up the numerical checks.  I recommend using the
[`scipy.integration.quad`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html)
routine.

### Solution

See the class notebook for an example of a solution.  Here are some highlights:

After working through the algebra,
we find the following effective potential (Eq. (6) in §35 of
{cite:p}`LL1:1976` with the listed equivalences)

\begin{gather*}
  E = \frac{I}{2}\dot{\theta}^2 + V_{e}(\theta),\\
  E \equiv E', \quad
  P_{\phi} \equiv M_z, \quad
  P_{\psi} \equiv M_3, \quad
  I \equiv I_1', \quad
  m \equiv \mu, \quad
  V_e \equiv U_{\text{eff}}.
\end{gather*}

This gives the following effective potential for $\theta \in [0, \pi]$:

\begin{gather*}
  V_{e}(\theta) = \frac{(P_{\phi} - P_{\psi}\cos\theta)^2}{2I\sin^2\theta} 
  - m g l(1-\cos\theta).
\end{gather*}

Note that the first term is manifestly positive, and diverges at the endpoints where
$\sin\theta \rightarrow 0$ unless $P_{\phi} = P_{\psi}$ which we shall discuss in the
section {ref}`sleeping-top` below.  This ensures that $V_e(\theta)$ is bounded from
below and has at least one minimum where $V_e'(\theta_p) = 0$, which gives rise to
precession.

::::{admonition} Details about the minimum.
:class: dropdown

It turns out that there is only one unique minimum unless the system is degenerate.  To
see this, we first simplify notation by considering $h(\theta) = V_e(\theta)/mgl$ and
introducing variables $a = P_{\psi}/\sqrt{mglI}$, $b = P_{\phi}/\sqrt{mglI}$, $c =
\cos\theta$, and $s=\sin\theta$:

\begin{gather*}
  h(\theta) = \frac{(b-ac)^2}{2s^2} - (1-c),\\
  h'(\theta) = \frac{(b-ac)(a-bc)}{s^3} - s = 0 \\
  \implies
  \overbrace{(a-bc)(b-ac)}^{ab(1+c^2) - (a^2+b^2)c} = s^4 = (1-c^2)^2.
  %h''(\theta) = \frac{(a^2+b^2)(1+2c^2) -abc(5 + c^2)}{s^4} - c.
\end{gather*}

This is a quartic equation for $c$.  Playing with this a bit, we find that it has only
one root for $c\in[-1,1]$ unless $a=b=0$ in which case $c = \pm 1$ are both solutions.
I don't know a nice simple way of proving this yet.  Please let me know if you find
one.  Here is a partial sketch of a proof:

The left-hand-side of this last equation is a monotonically decreasing function on $c\in
[-1, 1]$ that descends from $(a+b)^2$ when $c=-1$ to $-(a-b)^2$ when $c = 1$.  This can
be seen by computing its derivative:

\begin{gather*}
   \diff{(a-bc)(b-ac)}{c} = 2abc - (a^2+b^2) \leq - (\abs{a}-\abs{b})^2 \leq 0 .
\end{gather*}

The right-hand-side $s^4 = (1-c^2)^2$ is increasing from $0$ to $1$ for $c\in [-1, 0]$
and the decreases back to zero for $c \in [0, 1]$.  Thus, there is guaranteed to be a
solution, but we must eliminate the possibility of an additional multiple solution at
some positive $c$.  Indeed, there can be multiple solution, but they all occur for $c
\geq 1$.

I have not found a simple way of proving this though.
::::

To characterize the solutions, we write:

\begin{gather*}
  \frac{V_{e}(\theta)}{mgl} 
  = \frac{(\tilde{P}_{\phi} - \tilde{P}_{\psi}\cos\theta)^2}{2\sin^2\theta} 
  - (1-\cos\theta),\qquad
  \tilde{P}_{i} = \frac{P_{i}}{\sqrt{mgl}}.
\end{gather*}

The nature of the solutions is characterized by the two dimensionless parameters
$\tilde{P}_{\phi}$ and $\tilde{P}_{\psi}$.  The generic behavior is shown in the
following figure:

```{code-cell} ipython3
:tags: [hide-input]
A = 2
B = 1.0

th = np.linspace(0, np.pi, 500)[1:-1]
c = np.cos(th)
s = np.sin(th)

fig, ax = plt.subplots()
for A in [-1, -0.5, 0, 0.5, 1]:
    for B in [-1, -0.5, 0, 0.5, 1]:
        V = (A - B*c)**2/2/s**2 - (1-c)
        ax.plot(th, V)
ax.set(xlabel=r"$\theta$", ylabel=r"$V_{e}(\theta)/mgl$", ylim=(-2, 10));
```

Here we plot a variety of forms of the effective potential including the lower curve
$V_e(\theta) \geq mgl(\cos\theta - 1)$.  The generic behavior has precession at the
single minimum $\theta_p$ where $V'_{e}(\theta_p) = 0$ or oscillations about this
minimum for any energy, since the potential diverges at $\theta = 0$ and $\theta = \pi$.

The two particular solutions occur when $P_{\phi} = \pm P_{\psi}$:

```{code-cell} ipython3
:tags: [hide-input]

th = np.linspace(0, np.pi, 500)[1:-1]
c = np.cos(th)
s = np.sin(th)

fig, ax = plt.subplots()
for P in [0, 0.5, 1.0, 1.5, 2.0]:
    V1 = (P - P*c)**2/2/s**2 - (1-c)
    V2 = (P + P*c)**2/2/s**2 - (1-c)
    label1 = label2 = None
    if P == 0:
        label1 = r"$P_{\phi} = P_{\psi}$"
        label2 = r"$P_{\phi} = -P_{\psi}$"
    ax.plot(th, V1, 'C0-', label=label1)
    ax.plot(th, V2, 'C1:', label=label2)
ax.legend()
ax.set(xlabel=r"$\theta$", ylabel=r"$V_{e}(\theta)/mgl$", ylim=(-2, 10));
```

If $P_{\phi} = P_{\psi}$, then the effective potential vanishes at $\theta = 0$, which
may be a stable or unstable equilibrium. This corresponds to what is sometimes called
the "sleeping top" and we shall analyze this in a moment.  The other solution $P_{\phi}
= -P_{\psi}$ has the top oscillating through the bottom $\theta = \pi$.  The extreme
limiting case is when $P_{\phi} = P_{\psi} = 0$.  This corresponds to a top with no
spin, which is exactly equivalent to a pendulum oscillating about the minimum $\theta =
\pi$.

(sleeping-top)=
#### Sleeping Top

We start with the sleeping top, spinning upright about the equilibrium at $\theta = 0$ with
$P_{\psi} = P_{\phi}$.  Here we can expand the potential in powers of $\theta$ noting
that $\cos\theta = 1 - \theta^2/2 + \order(\theta^4)$ and $\sin\theta = \theta +
\order(\theta^3)$.  Keeping terms to quadratic order, we have:

\begin{gather*}
  V_{e}(\theta) = \left(\frac{P_{\psi}^2}{4I} - m g l\right)\frac{\theta^2}{2} + \order(\theta^4).
\end{gather*}

The $\theta = 0$ equilibrium as long as $P_{\psi}^2 > 4mglI$.  Thus, as long as the top
is spinning fast enough, it will remain stable, but as soon as friction causes the
angular momentum to drop below this value, the top will become unstable and start to
wobble.

(precession)=
#### Precession and Nutation

In the generic case, the top will either steadily precess with at angle $\theta_p$, or
nutate about this equilibrium value.  We can characterize this behavior by expanding 

\begin{gather*}
   V_{e}(\theta) = V_{e}(\theta_p) + V_{e}''(\theta_p)\frac{(\theta - \theta_p)^2}{2} +
   \order(\theta - \theta_p)^3, \qquad
   V_{e}'(\theta_p) = 0,
\end{gather*}

where

\begin{gather*}
  V_{e}(\theta) 
    = \frac{(P_{\phi} - P_{\psi}\cos\theta)^2}{2I\sin^2\theta} - m g l(1-\cos\theta),\\
  0 = V_{e}'(\theta) 
    = \frac{(P_{\psi} - P_{\phi}\cos\theta)(P_{\phi} - P_{\psi}\cos\theta)}{I\sin^3\theta}
      - m g l \sin\theta,\\
  V_{e}''(\theta_p) 
  = 
    \frac{P_{\phi}^2 + P_{\psi}^2 - 2P_{\phi}P_{\psi}\cos\theta_p}{I\sin^2\theta_p} 
    - 4m g l \cos\theta_p
\end{gather*}

The rate of precession will be:

\begin{gather*}
   \dot{\phi} = \frac{P_{\phi} - P_{\psi}\cos\theta_p}{I\sin^2\theta_p},
\end{gather*}

and the nutation (angular) frequency $\omega$ and period $T$ will be

\begin{gather*}
  \omega = \sqrt{\frac{V_{e}''(\theta_p)}{I}}, \qquad
  T = \frac{2\pi}{\omega}.
\end{gather*}

To check this, the period can be compared with Eq. (7) of {cite:p}`LL1:1976`:

\begin{gather*}
  T = \int \frac{\d{\theta}}{\sqrt{2\bigl(E - V_{e}(\theta)\bigr)/I}}
    = 2\int_{\theta_2}^{\theta_1} \frac{\d{\theta}}{\sqrt{2\bigl(E - V_{e}(\theta)\bigr)/I}}
\end{gather*}

where $V_{e}(\theta_1) = V_{e}(\theta_2) = E$.

To distinguish between the various types of nutation shown in Fig. 49 of
{cite:p}`LL1:1976`, we can inspect $\dot{\phi}_2$ at $\theta = \theta_2$.  Case (a)
has $\dot{\phi}_2 > 0$, case (b) has $\dot{\phi}_2 < 0$ and case (c) has $\dot{\phi}_2 =
0$.

In order to find a configuration in case (b) or (c), we must have $P_{\phi} =
P_{\psi}\cos\theta$ for some $\theta \in [\theta_2, \theta1]$. 
If $P_{\psi} > P_{\phi} > 0$, as is the case for a rapidly spinning top, then this will
happen for some $\theta_2 < \pi/2$, so as long as we have high enough energy, then
configuration (b) can be realized.

Here we do a numerical check.  We find the turning points $\theta_2 \in (0, \theta_p] $
and $\theta_2 \in [\theta_2, \pi)$ using {py:func}`scipy.optimize.brentq`, then
integrate using {py:func}`scipy.integrate.quad` to check if the period $T$ agrees with
the normal-mode frequency $2\pi/\omega$.

```{code-cell} ipython3
import numpy as np
from scipy.integrate import quad
from scipy.optimize import brentq

I = 1.1
mgl = 1.2
P_psi = 3.3
P_phi = 1.5

a, b = np.divide([P_psi, P_phi], np.sqrt(mgl*I))

# Quartic Polynomial for c
P_c = [1, 0, -2 - a*b, (a**2+b**2), 1 - a*b]
cs = np.roots(P_c)
inds = np.where(np.logical_and(cs.imag == 0, np.abs(cs) <= 1))
assert len(inds) == 1
c = cs[inds[0]].real

theta_p = np.arccos(c)

th = np.linspace(0, np.pi, 500)[1:-1]
def V_e(th, d=0):
    c, s = np.cos(th), np.sin(th)
    if d == 0:
        V_e = (P_phi - P_psi*c)**2/2/I/s**2 - mgl*(1-c)
        return V_e
    if d == 1:
        dV_e = (P_phi - P_psi*c)*(P_psi - P_phi*c)/I/s**3 - mgl*s
        return dV_e
    elif d == 2:
        ddV_e = (P_phi**2 + P_psi**2 - 2*P_phi*P_psi*c)/I/s**2 - 4*mgl*c
        return ddV_e

V_p = V_e(theta_p)
assert np.allclose(V_e(theta_p, d=1), 0)

w = np.sqrt(V_e(theta_p, d=2)/I)
T_normal_mode = (2*np.pi / w).ravel()[0]

dphi_dt = (P_phi - P_psi*np.cos(th))/I/np.sin(th)**2

fig, ax = plt.subplots()
ax.plot(th, V_e(th)/mgl, label=r"$V_{e}(\theta)/mgl$")
ax.axvline([theta_p], ls=":", c="y")
ax.axhline([V_p/mgl], ls=":", c="y")
ax.axhline([0], ls="--", c="k")
ax.plot(th, dphi_dt /np.sqrt(mgl/I), "C1--", label=r"$\dot{\phi}/\sqrt{mgl/I}$")

# Plot periods for several excitations:

def f(th):
    return V_e(th) - E

def integrand(th):
    return 2/np.sqrt(2*(E-V_e(th))/I)

for dE_mgl in [0.01, 0.1, 1, 2]:
    E = V_p + dE_mgl*mgl

    # Find turning points
    th2 = brentq(f, 1e-16, theta_p)
    th1 = brentq(f, theta_p, np.pi - 1e-16)

    T = quad(integrand, th2, th1)[0]

    ax.plot([th2, th1], [E/mgl, E/mgl], '-', label=f"$T/T_{{NM}}={T/T_normal_mode:.4f}$")

ax.legend()
ax.set(xlabel=r"$\theta$", ylim=(-2, 4));
```

Numerically, the normal mode oscillations agree with the integrated period, but as the
amplitude of the mode is increased, the period decreases relative to the normal mode.
